C. ЕТА
Ограничение времени	1 секунда
Ограничение памяти	64 Мб
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
При вызове такси мы не всегда можем сказать точно, за сколько времени таксист может доехать до пользователя. В этой задаче вам нужно разработать алгоритм, который будет определять, какие таксисты смогут гарантированно добраться до точки заказа за отведенное время, если примут его моментально. Таксист может стоять на месте или перемещаться по кругу по часовой стрелке, поэтому на момент вызова его позиция может измениться по сравнению с последней известной — он мог двигаться с любой скоростью, вплоть до максимально разрешенной. Точка заказа и точки, в которых находятся или могут находиться таксисты, — это точки на круге, перемещаться на вызов такси может только по часовой стрелке.

Формат ввода
В первой строке задано три целых числа: число событий 
N
N, длина круга 
L
L (в метрах), по которому перемещаются таксисты и на котором происходят заказы, максимальная скорость 
S
S с которой такси могут перемещаться по кругу.

В последующих 
N
N строках описываются события в следующем формате:

TAXI <timestamp> <taxi_id> <taxi_position>. Команда, оповещающая о том, что таксист с номером 
t
a
x
i
_
i
d
taxi_id в момент времени 
t
i
m
e
s
t
a
m
p
timestamp прислал координату своего местоположения. Местоположение определяется значением 
t
a
x
i
_
p
o
s
i
t
i
o
n
taxi_position — целым числом в диапазоне 
[
0
,
L
)
[0,L), где 
0
0 означает, что такси стоит в начале круга, а любое положительное число — дальность позиции таксиста от начала круга при движении по часовой стрелке.
ORDER <timestamp> <order_id> <order_position> <order_time>. Команда, оповещающая о том, что в момент времени 
t
i
m
e
s
t
a
m
p
timestamp пришёл заказ 
o
r
d
e
r
_
i
d
order_id на точку А, определяющуюся значением 
o
r
d
e
r
_
p
o
s
i
t
i
o
n
order_position — целым числом в диапазоне 
[
0
,
L
)
[0,L) (где 
0
0 означает, что заказ произошел в начале круга, а любое положительное число — дальность позиции вызова от начала круга при движении по часовой стрелке), до которого нужно гарантированно доехать за 
o
r
d
e
r
_
t
i
m
e
order_time секунд.
Поле 
t
i
m
e
s
t
a
m
p
timestamp — это unix-like секундный таймстемп, все приходящие команды отсортированы по нему в порядке возрастания. Возрастание нестрогое: в нескольких последовательных командах могут быть одинаковые таймстемпы, но на момент события вызова мы рассматриваем только те события, которые нам известны (то есть не рассматриваем события, которые пришли после вызова, даже если у них такой же таймстемп).

Все заказы пронумерованы (
o
r
d
e
r
_
i
d
order_id), начиная с 
0
0 в порядке их появления.

Ограничения:

N
≤
5000
N≤5000;
0
<
L
≤
100000
0<L≤100000 (в метрах);
0
<
S
≤
10
0<S≤10 (в метрах в секунду);
0
≤
o
r
d
e
r
_
t
i
m
e
≤
L
0≤order_time≤L (в секундах);
0
≤
t
a
x
i
_
i
d
<
N
0≤taxi_id<N (число от 
0
0 до 
N
N).
Формат вывода
Программа должна вывести 
K
K строк, где 
K
K — количество команд 
O
R
D
E
R
ORDER.

В ответ на каждую команду 
O
R
D
E
R
ORDER программа должна вывести строку с таксистами (набор 
t
a
x
i
_
i
d
taxi_id, разделённых пробелами), которые гарантированно смогут добраться до точки А не более чем за 
o
r
d
e
r
_
t
i
m
e
order_time. Если таких таксистов больше 5, то нужно вывести 5 любых. Если ни один таксист не может гарантировано приехать в отведённое время, то в строке должен быть единственный идентификатор 
−
1
−1. Идентификаторы в одной строке не должны повторяться.

Пример
Ввод
Вывод
3 100 1
TAXI 1738300000 0 0
TAXI 1738300000 1 2
ORDER 1738300001 0 1 1
0
Примечания
Примечание к примеру.

Возможные позиции такси с id 
0
0: 
[
0
,
1
]
[0,1]. В таком случае на момент заказа таксист может добраться до него за 0 или 1 секунду, то есть он гарантированно может добраться за требуемую 1 секунду до точки вызова.

Возможные позиции такси с id 
1
1: 
[
2
,
3
]
[2,3]. То есть таксист может добраться до точки вызова не меньше чем за 98 секунд, поэтому он нам не подходит.
